{"ast":null,"code":"import { Player } from \"./Player\";\nimport { playerRoster } from \"./playerRoster\";\nconst updateScore = elementName => {\n  let clickedButton = document.getElementById(elementName);\n  let currentPlayer = clickedButton.getElementsByClassName('playerName')[0].innerText;\n  let leftScoreDisplay = document.getElementById('leftPlayer').getElementsByClassName('playerScore')[0];\n  let rightScoreDisplay = document.getElementById('rightPlayer').getElementsByClassName('playerScore')[0];\n  let leftPlayerName = document.getElementById('leftPlayer').getElementsByClassName('playerName')[0];\n  let rightPlayerName = document.getElementById('rightPlayer').getElementsByClassName('playerName')[0];\n\n  //figure out which player it is and increment score\n  switch (currentPlayer) {\n    case playerRoster[0].name:\n      playerRoster[0].incrementScore();\n      clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[0].score;\n      break;\n    case playerRoster[1].name:\n      playerRoster[1].incrementScore();\n      clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[1].score;\n      break;\n    case playerRoster[2].name:\n      playerRoster[2].incrementScore();\n      clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[2].score;\n      break;\n    default:\n      console.log('Error: Player not found');\n  }\n\n  //update displayed position of players based on the non-pocket players scores\n  if (Number(leftScoreDisplay.innerText) > Number(rightScoreDisplay.innerText)) {\n    let tempName = leftPlayerName.innerText;\n    let tempScore = leftScoreDisplay.innerText;\n    leftPlayerName.innerText = rightPlayerName.innerText;\n    leftScoreDisplay.innerText = rightScoreDisplay.innerText;\n    rightPlayerName.innerText = tempName;\n    rightScoreDisplay.innerText = tempScore;\n  }\n};\nexport { updateScore };","map":{"version":3,"names":["Player","playerRoster","updateScore","elementName","clickedButton","document","getElementById","currentPlayer","getElementsByClassName","innerText","leftScoreDisplay","rightScoreDisplay","leftPlayerName","rightPlayerName","name","incrementScore","score","console","log","Number","tempName","tempScore"],"sources":["F:/Computer Programming/Github/Pocket-Pong-Scoreboard/Pocket Pong/src/ScoreHandling.js"],"sourcesContent":["import { Player } from \"./Player\";\r\nimport { playerRoster } from \"./playerRoster\";\r\n\r\nconst updateScore = (elementName) => {\r\n\r\n    let clickedButton = document.getElementById(elementName);\r\n    let currentPlayer = clickedButton.getElementsByClassName('playerName')[0].innerText;\r\n\r\n    let leftScoreDisplay = document.getElementById('leftPlayer').getElementsByClassName('playerScore')[0];\r\n    let rightScoreDisplay = document.getElementById('rightPlayer').getElementsByClassName('playerScore')[0];\r\n\r\n    let leftPlayerName = document.getElementById('leftPlayer').getElementsByClassName('playerName')[0];\r\n    let rightPlayerName = document.getElementById('rightPlayer').getElementsByClassName('playerName')[0];\r\n\r\n    //figure out which player it is and increment score\r\n    switch (currentPlayer) {\r\n        case playerRoster[0].name:\r\n            playerRoster[0].incrementScore();\r\n            clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[0].score;\r\n            break;\r\n        case playerRoster[1].name:\r\n            playerRoster[1].incrementScore();\r\n            clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[1].score;\r\n            break;\r\n        case playerRoster[2].name:\r\n            playerRoster[2].incrementScore();\r\n            clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[2].score;\r\n            break;\r\n        default:\r\n            console.log('Error: Player not found');\r\n    }\r\n\r\n    //update displayed position of players based on the non-pocket players scores\r\n    if(Number(leftScoreDisplay.innerText) > Number(rightScoreDisplay.innerText)) {\r\n        let tempName = leftPlayerName.innerText;\r\n        let tempScore = leftScoreDisplay.innerText;\r\n        \r\n        leftPlayerName.innerText = rightPlayerName.innerText;\r\n        leftScoreDisplay.innerText = rightScoreDisplay.innerText;\r\n\r\n        rightPlayerName.innerText = tempName;\r\n        rightScoreDisplay.innerText = tempScore;\r\n    }\r\n};\r\n\r\n\r\nexport {updateScore};"],"mappings":"AAAA,SAASA,MAAM,QAAQ,UAAU;AACjC,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,MAAMC,WAAW,GAAIC,WAAW,IAAK;EAEjC,IAAIC,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAACH,WAAW,CAAC;EACxD,IAAII,aAAa,GAAGH,aAAa,CAACI,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS;EAEnF,IAAIC,gBAAgB,GAAGL,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACE,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;EACrG,IAAIG,iBAAiB,GAAGN,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACE,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;EAEvG,IAAII,cAAc,GAAGP,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACE,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;EAClG,IAAIK,eAAe,GAAGR,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACE,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;EAEpG;EACA,QAAQD,aAAa;IACjB,KAAKN,YAAY,CAAC,CAAC,CAAC,CAACa,IAAI;MACrBb,YAAY,CAAC,CAAC,CAAC,CAACc,cAAc,CAAC,CAAC;MAChCX,aAAa,CAACI,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,GAAGR,YAAY,CAAC,CAAC,CAAC,CAACe,KAAK;MACxF;IACJ,KAAKf,YAAY,CAAC,CAAC,CAAC,CAACa,IAAI;MACrBb,YAAY,CAAC,CAAC,CAAC,CAACc,cAAc,CAAC,CAAC;MAChCX,aAAa,CAACI,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,GAAGR,YAAY,CAAC,CAAC,CAAC,CAACe,KAAK;MACxF;IACJ,KAAKf,YAAY,CAAC,CAAC,CAAC,CAACa,IAAI;MACrBb,YAAY,CAAC,CAAC,CAAC,CAACc,cAAc,CAAC,CAAC;MAChCX,aAAa,CAACI,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,GAAGR,YAAY,CAAC,CAAC,CAAC,CAACe,KAAK;MACxF;IACJ;MACIC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC9C;;EAEA;EACA,IAAGC,MAAM,CAACT,gBAAgB,CAACD,SAAS,CAAC,GAAGU,MAAM,CAACR,iBAAiB,CAACF,SAAS,CAAC,EAAE;IACzE,IAAIW,QAAQ,GAAGR,cAAc,CAACH,SAAS;IACvC,IAAIY,SAAS,GAAGX,gBAAgB,CAACD,SAAS;IAE1CG,cAAc,CAACH,SAAS,GAAGI,eAAe,CAACJ,SAAS;IACpDC,gBAAgB,CAACD,SAAS,GAAGE,iBAAiB,CAACF,SAAS;IAExDI,eAAe,CAACJ,SAAS,GAAGW,QAAQ;IACpCT,iBAAiB,CAACF,SAAS,GAAGY,SAAS;EAC3C;AACJ,CAAC;AAGD,SAAQnB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}