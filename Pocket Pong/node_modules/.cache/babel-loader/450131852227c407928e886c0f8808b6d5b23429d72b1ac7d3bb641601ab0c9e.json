{"ast":null,"code":"const updateScore = elementName => {\n  let clickedButton = document.getElementById(elementName);\n  let currentPlayer = clickedButton.getElementsByClassName('playerName')[0].innerText;\n\n  //update score value\n  let currentScore = Number(clickedButton.getElementsByClassName('playerScore')[0].innerText);\n  clickedButton.getElementsByClassName('playerScore')[0].innerText = currentScore + 1;\n  if (document.getElementById('leftPlayer') != null && document.getElementById('rightPlayer') != null) {\n    let leftScoreDisplay = document.getElementById('leftPlayer').getElementsByClassName('playerScore')[0];\n    let rightScoreDisplay = document.getElementById('rightPlayer').getElementsByClassName('playerScore')[0];\n    let leftPlayerName = document.getElementById('leftPlayer').getElementsByClassName('playerName')[0];\n    let rightPlayerName = document.getElementById('rightPlayer').getElementsByClassName('playerName')[0];\n    updateLowerDisplay(leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay);\n    checkWinCondition(leftScoreDisplay, rightScoreDisplay);\n  } else {\n    document.getElementById('pocketPlayer').getElementsByClassName('playerScore')[0] += 1;\n  }\n};\nconst updateLowerDisplay = (leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay) => {\n  //update displayed position of players based on the non-pocket players scores\n  if (Number(leftScoreDisplay.innerText) > Number(rightScoreDisplay.innerText)) {\n    let tempName = leftPlayerName.innerText;\n    let tempScore = leftScoreDisplay.innerText;\n    leftPlayerName.innerText = rightPlayerName.innerText;\n    leftScoreDisplay.innerText = rightScoreDisplay.innerText;\n    rightPlayerName.innerText = tempName;\n    rightScoreDisplay.innerText = tempScore;\n  }\n};\nconst checkWinCondition = (leftScoreDisplay, rightScoreDisplay) => {\n  if (Number(leftScoreDisplay.innerText) >= 11) {\n    if (document.getElementById('leftPlayer') != null) {\n      //left player wins, remove left player button\n      document.getElementById('leftPlayer').remove();\n\n      //make pocket player clickable\n      document.getElementById('pocketPlayer').onclick = () => updateScore('pocketPlayer');\n\n      //make remaining lower player undraggable\n      document.getElementById('rightPlayer').draggable = false;\n    }\n  }\n};\nexport { updateScore, updateLowerDisplay };","map":{"version":3,"names":["updateScore","elementName","clickedButton","document","getElementById","currentPlayer","getElementsByClassName","innerText","currentScore","Number","leftScoreDisplay","rightScoreDisplay","leftPlayerName","rightPlayerName","updateLowerDisplay","checkWinCondition","tempName","tempScore","remove","onclick","draggable"],"sources":["F:/Computer Programming/Github/Pocket-Pong-Scoreboard/Pocket Pong/src/ScoreHandling.js"],"sourcesContent":["const updateScore = (elementName) => {\r\n\r\n    let clickedButton = document.getElementById(elementName);\r\n    let currentPlayer = clickedButton.getElementsByClassName('playerName')[0].innerText;\r\n\r\n    //update score value\r\n    let currentScore = Number(clickedButton.getElementsByClassName('playerScore')[0].innerText);\r\n    clickedButton.getElementsByClassName('playerScore')[0].innerText = currentScore + 1;\r\n\r\n\r\n\r\n    if(document.getElementById('leftPlayer') != null && document.getElementById('rightPlayer') != null) {\r\n\r\n        let leftScoreDisplay = document.getElementById('leftPlayer').getElementsByClassName('playerScore')[0];\r\n        let rightScoreDisplay = document.getElementById('rightPlayer').getElementsByClassName('playerScore')[0];\r\n\r\n        let leftPlayerName = document.getElementById('leftPlayer').getElementsByClassName('playerName')[0];\r\n        let rightPlayerName = document.getElementById('rightPlayer').getElementsByClassName('playerName')[0];\r\n\r\n        updateLowerDisplay(leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay);\r\n        checkWinCondition (leftScoreDisplay, rightScoreDisplay);\r\n    }\r\n    else {\r\n\r\n        document.getElementById('pocketPlayer').getElementsByClassName('playerScore')[0] += 1;\r\n    }\r\n\r\n\r\n};\r\n\r\nconst updateLowerDisplay = (leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay) => {\r\n    \r\n    //update displayed position of players based on the non-pocket players scores\r\n    if(Number(leftScoreDisplay.innerText) > Number(rightScoreDisplay.innerText)) {\r\n        let tempName = leftPlayerName.innerText;\r\n        let tempScore = leftScoreDisplay.innerText;\r\n        \r\n        leftPlayerName.innerText = rightPlayerName.innerText;\r\n        leftScoreDisplay.innerText = rightScoreDisplay.innerText;\r\n\r\n        rightPlayerName.innerText = tempName;\r\n        rightScoreDisplay.innerText = tempScore;\r\n    }\r\n};\r\n\r\nconst checkWinCondition = (leftScoreDisplay, rightScoreDisplay) => {\r\n\r\n    if(Number(leftScoreDisplay.innerText) >= 11) {\r\n        \r\n        if(document.getElementById('leftPlayer') != null) {\r\n            //left player wins, remove left player button\r\n            document.getElementById('leftPlayer').remove();\r\n\r\n            //make pocket player clickable\r\n            document.getElementById('pocketPlayer').onclick = () => updateScore('pocketPlayer');\r\n\r\n            //make remaining lower player undraggable\r\n            document.getElementById('rightPlayer').draggable = false;\r\n        }\r\n        \r\n    }\r\n};\r\n\r\n\r\nexport {updateScore, updateLowerDisplay};"],"mappings":"AAAA,MAAMA,WAAW,GAAIC,WAAW,IAAK;EAEjC,IAAIC,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAACH,WAAW,CAAC;EACxD,IAAII,aAAa,GAAGH,aAAa,CAACI,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS;;EAEnF;EACA,IAAIC,YAAY,GAAGC,MAAM,CAACP,aAAa,CAACI,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC;EAC3FL,aAAa,CAACI,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,GAAGC,YAAY,GAAG,CAAC;EAInF,IAAGL,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,IAAI,IAAI,IAAID,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,IAAI,IAAI,EAAE;IAEhG,IAAIM,gBAAgB,GAAGP,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACE,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACrG,IAAIK,iBAAiB,GAAGR,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACE,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAEvG,IAAIM,cAAc,GAAGT,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACE,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClG,IAAIO,eAAe,GAAGV,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACE,sBAAsB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAEpGQ,kBAAkB,CAACF,cAAc,EAAEF,gBAAgB,EAAEG,eAAe,EAAEF,iBAAiB,CAAC;IACxFI,iBAAiB,CAAEL,gBAAgB,EAAEC,iBAAiB,CAAC;EAC3D,CAAC,MACI;IAEDR,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACE,sBAAsB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;EACzF;AAGJ,CAAC;AAED,MAAMQ,kBAAkB,GAAGA,CAACF,cAAc,EAAEF,gBAAgB,EAAEG,eAAe,EAAEF,iBAAiB,KAAK;EAEjG;EACA,IAAGF,MAAM,CAACC,gBAAgB,CAACH,SAAS,CAAC,GAAGE,MAAM,CAACE,iBAAiB,CAACJ,SAAS,CAAC,EAAE;IACzE,IAAIS,QAAQ,GAAGJ,cAAc,CAACL,SAAS;IACvC,IAAIU,SAAS,GAAGP,gBAAgB,CAACH,SAAS;IAE1CK,cAAc,CAACL,SAAS,GAAGM,eAAe,CAACN,SAAS;IACpDG,gBAAgB,CAACH,SAAS,GAAGI,iBAAiB,CAACJ,SAAS;IAExDM,eAAe,CAACN,SAAS,GAAGS,QAAQ;IACpCL,iBAAiB,CAACJ,SAAS,GAAGU,SAAS;EAC3C;AACJ,CAAC;AAED,MAAMF,iBAAiB,GAAGA,CAACL,gBAAgB,EAAEC,iBAAiB,KAAK;EAE/D,IAAGF,MAAM,CAACC,gBAAgB,CAACH,SAAS,CAAC,IAAI,EAAE,EAAE;IAEzC,IAAGJ,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE;MAC9C;MACAD,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACc,MAAM,CAAC,CAAC;;MAE9C;MACAf,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC,CAACe,OAAO,GAAG,MAAMnB,WAAW,CAAC,cAAc,CAAC;;MAEnF;MACAG,QAAQ,CAACC,cAAc,CAAC,aAAa,CAAC,CAACgB,SAAS,GAAG,KAAK;IAC5D;EAEJ;AACJ,CAAC;AAGD,SAAQpB,WAAW,EAAEc,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}