{"ast":null,"code":"import { Player } from \"./Player\";\nimport { playerRoster } from \"./playerRoster\";\nconst updateScore = elementName => {\n  let clickedButton = document.getElementById(elementName);\n  let currentPlayer = clickedButton.getElementsByClassName('playerName')[0].innerText;\n\n  //figure out which player it is and increment score\n  switch (currentPlayer) {\n    case playerRoster[0].name:\n      playerRoster[0].incrementScore();\n      clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[0].score;\n      break;\n    case playerRoster[1].name:\n      playerRoster[1].incrementScore();\n      clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[1].score;\n      break;\n    case playerRoster[2].name:\n      playerRoster[2].incrementScore();\n      clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[2].score;\n      break;\n    default:\n      console.log('Error: Player not found');\n  }\n  checkWinCondition(leftScoreDisplay, rightScoreDisplay);\n  if (elementName !== \"pocketPlayer\") {\n    let leftScoreDisplay = document.getElementById('leftPlayer').getElementsByClassName('playerScore')[0];\n    let rightScoreDisplay = document.getElementById('rightPlayer').getElementsByClassName('playerScore')[0];\n    let leftPlayerName = document.getElementById('leftPlayer').getElementsByClassName('playerName')[0];\n    let rightPlayerName = document.getElementById('rightPlayer').getElementsByClassName('playerName')[0];\n    updateLowerDisplay(leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay);\n  } else {\n    document.getElementById('pocketPlayer').getElementsByClassName('playerScore')[0] += 1;\n  }\n};\nconst updateLowerDisplay = (leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay) => {\n  //update displayed position of players based on the non-pocket players scores\n  if (Number(leftScoreDisplay.innerText) > Number(rightScoreDisplay.innerText)) {\n    let tempName = leftPlayerName.innerText;\n    let tempScore = leftScoreDisplay.innerText;\n    leftPlayerName.innerText = rightPlayerName.innerText;\n    leftScoreDisplay.innerText = rightScoreDisplay.innerText;\n    rightPlayerName.innerText = tempName;\n    rightScoreDisplay.innerText = tempScore;\n  }\n};\nconst checkWinCondition = (leftScoreDisplay, rightScoreDisplay) => {\n  if (Number(leftScoreDisplay.innerText) >= 11) {\n    //left player wins, remove left player button\n    document.getElementById('leftPlayer').remove();\n\n    //make pocket player clickable\n    document.getElementById('pocketPlayer').onclick = () => updateScore('pocketPlayer');\n\n    //make remaining lower player undraggable\n  }\n};\nexport { updateScore, updateLowerDisplay };","map":{"version":3,"names":["Player","playerRoster","updateScore","elementName","clickedButton","document","getElementById","currentPlayer","getElementsByClassName","innerText","name","incrementScore","score","console","log","checkWinCondition","leftScoreDisplay","rightScoreDisplay","leftPlayerName","rightPlayerName","updateLowerDisplay","Number","tempName","tempScore","remove","onclick"],"sources":["F:/Computer Programming/Github/Pocket-Pong-Scoreboard/Pocket Pong/src/ScoreHandling.js"],"sourcesContent":["import { Player } from \"./Player\";\r\nimport { playerRoster } from \"./playerRoster\";\r\n\r\nconst updateScore = (elementName) => {\r\n\r\n    let clickedButton = document.getElementById(elementName);\r\n    let currentPlayer = clickedButton.getElementsByClassName('playerName')[0].innerText;\r\n\r\n    //figure out which player it is and increment score\r\n    switch (currentPlayer) {\r\n        case playerRoster[0].name:\r\n            playerRoster[0].incrementScore();\r\n            clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[0].score;\r\n            break;\r\n        case playerRoster[1].name:\r\n            playerRoster[1].incrementScore();\r\n            clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[1].score;\r\n            break;\r\n        case playerRoster[2].name:\r\n            playerRoster[2].incrementScore();\r\n            clickedButton.getElementsByClassName('playerScore')[0].innerText = playerRoster[2].score;\r\n            break;\r\n        default:\r\n            console.log('Error: Player not found');\r\n    }\r\n\r\n    checkWinCondition(leftScoreDisplay, rightScoreDisplay);\r\n\r\n    if(elementName !== \"pocketPlayer\") {\r\n\r\n        let leftScoreDisplay = document.getElementById('leftPlayer').getElementsByClassName('playerScore')[0];\r\n        let rightScoreDisplay = document.getElementById('rightPlayer').getElementsByClassName('playerScore')[0];\r\n\r\n        let leftPlayerName = document.getElementById('leftPlayer').getElementsByClassName('playerName')[0];\r\n        let rightPlayerName = document.getElementById('rightPlayer').getElementsByClassName('playerName')[0];\r\n\r\n        updateLowerDisplay(leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay);\r\n    }\r\n    else {\r\n        document.getElementById('pocketPlayer').getElementsByClassName('playerScore')[0] += 1;\r\n    }\r\n\r\n};\r\n\r\nconst updateLowerDisplay = (leftPlayerName, leftScoreDisplay, rightPlayerName, rightScoreDisplay) => {\r\n    \r\n    //update displayed position of players based on the non-pocket players scores\r\n    if(Number(leftScoreDisplay.innerText) > Number(rightScoreDisplay.innerText)) {\r\n        let tempName = leftPlayerName.innerText;\r\n        let tempScore = leftScoreDisplay.innerText;\r\n        \r\n        leftPlayerName.innerText = rightPlayerName.innerText;\r\n        leftScoreDisplay.innerText = rightScoreDisplay.innerText;\r\n\r\n        rightPlayerName.innerText = tempName;\r\n        rightScoreDisplay.innerText = tempScore;\r\n    }\r\n};\r\n\r\nconst checkWinCondition = (leftScoreDisplay, rightScoreDisplay) => {\r\n\r\n    if(Number(leftScoreDisplay.innerText) >= 11) {\r\n        \r\n        //left player wins, remove left player button\r\n        document.getElementById('leftPlayer').remove();\r\n\r\n        //make pocket player clickable\r\n        document.getElementById('pocketPlayer').onclick = () => updateScore('pocketPlayer');\r\n\r\n        //make remaining lower player undraggable\r\n\r\n        \r\n    }\r\n};\r\n\r\n\r\nexport {updateScore, updateLowerDisplay};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}